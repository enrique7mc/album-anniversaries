{"ast":null,"code":"var _a;\nimport { __decorate, __metadata, __param } from \"tslib\";\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { client_id, scope, stateKey } from './constants';\nimport { SpotifyService } from './spotify.service';\nimport { Inject } from '@angular/core';\nimport { APP_CONFIG } from './app-config';\nimport { Subject } from 'rxjs';\nimport { map, takeUntil, take } from 'rxjs/operators';\nimport { AngularFireFunctions } from '@angular/fire/functions';\nlet AppComponent = class AppComponent {\n  constructor(spotifyService, fn, config) {\n    this.spotifyService = spotifyService;\n    this.fn = fn;\n    this.config = config;\n    this.params = null;\n    this.showAlbumBirthdayList = false;\n    this.loading = false;\n    this._destroyed$ = new Subject();\n    this.title = config.title;\n  }\n  ngOnInit() {\n    this.params = this.getHashParams();\n    this.accessToken = this.params['access_token'];\n    console.log(this.getCode());\n    if (this.authError) {\n      console.error('There was an error during the authentication');\n      return;\n    }\n    // localStorage.removeItem(stateKey);\n    if (this.accessToken) {\n      this.loading = true;\n      const doneLoading$ = this.spotifyService.loadArtistsWithAlbums(this.accessToken);\n      // TODO(me): figure out a better way to do the subscription logic.\n      this.artistsWithRecentAlbums$ = this.spotifyService.artists.pipe(map(artists => artists.map(a => Object.assign({}, a))), map(artists => artists.filter(artist => {\n        artist.albums = artist.albums.filter(SpotifyService.albumReleasedPastYear);\n        return artist.albums.length > 0;\n      }), takeUntil(this._destroyed$)));\n      this.artists$ = this.spotifyService.artists.pipe(map(artists => artists.map(a => Object.assign({}, a))), map(artists => artists.filter(artist => {\n        artist.albums = artist.albums.filter(SpotifyService.albumHadBirthdayPastWeek);\n        return artist.albums.length > 0;\n      }), takeUntil(this._destroyed$)));\n      doneLoading$.pipe(takeUntil(this._destroyed$), take(1)).subscribe(() => this.loading = false);\n    }\n  }\n  ngOnDestroy() {\n    this._destroyed$.next();\n    this._destroyed$.complete();\n  }\n  get authError() {\n    let state = this.params['state'];\n    let storedState = localStorage.getItem(stateKey);\n    return this.accessToken && (state == null || state !== storedState);\n  }\n  getCode() {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('code');\n  }\n  getHashParams() {\n    let hashParams = {};\n    let e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n  generateRandomString(length) {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  login() {\n    let state = this.generateRandomString(16);\n    localStorage.setItem(stateKey, state);\n    var url = 'https://accounts.spotify.com/authorize';\n    url += '?response_type=token';\n    url += `&client_id=${encodeURIComponent(client_id)}`;\n    url += `&scope=${encodeURIComponent(scope)}`;\n    url += `&redirect_uri=${encodeURIComponent(this.config.redirectUrl)}`;\n    url += `&state=${encodeURIComponent(state)}`;\n    window.location.href = url;\n  }\n  authorize() {\n    let state = this.generateRandomString(16);\n    localStorage.setItem(stateKey, state);\n    var url = 'https://accounts.spotify.com/authorize';\n    url += '?response_type=code';\n    url += `&client_id=${encodeURIComponent(client_id)}`;\n    url += `&scope=${encodeURIComponent(scope)}`;\n    url += `&redirect_uri=${encodeURIComponent(this.config.redirectUrl)}`;\n    url += `&state=${encodeURIComponent(state)}`;\n    window.location.href = url;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  encapsulation: ViewEncapsulation.None\n}), __param(2, Inject(APP_CONFIG)), __metadata(\"design:paramtypes\", [SpotifyService, typeof (_a = typeof AngularFireFunctions !== \"undefined\" && AngularFireFunctions) === \"function\" ? _a : Object, Object])], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}